compile-link & run
  g++ -std=c++11 -stdlib=libc++ test_quick_find.cpp quick_find.cc test_main.cc -lgtest -lpthread -o quick
run: ./quick



quick find algo:
Algorithms

Quick find problem:
1. This will tell us see if two points are connected or not.
2. This algo will never tell or give the path
3. Algo details:
    1. Reflexive: p is connected to p
    2. Symmetric: if p is connected to Q then Q is connected to p
    3. Transitive: if p is connected to Q and Q is connected to R then p is connected to R
    4. Find query:  check if both values are in the same component or not
        1. in left image Is 1 connected to 4; yes they are in same array
        2. in left image Is 1 connected to 7; no they are NOT in same array
    5. Union command: this will connect two components; in the example below connect 2,5 will result in right side fig. In simple words change update value of former in the pervious one. 
        1. arr[] = {0,1,2,3,4,5,6,7,8,9,10} //every on connected to himself
        2. union(2,5) arr = {0,1,5,3,4,5,6,7,8,9,10}
        3. Union(6,8) arr = {0,1,5,3,4,5,8,7,8,9,10}
        4. union(2,8) arr = {0,1,8,3,4,8,8,7,8,9,10}
￼

Class QuickUnionFind
{
  Vector<int> union_find;
  Public:
    UnionFind(int max_elements);
    Void union(int p, int q);
    Bool connected(int p, int q);
};
￼

  
