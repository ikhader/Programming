
1. stack
2. queue
3. sort
4. search
5. tree
   a. add nodes ==> done
   b. find sum of all elements ==> done
   c. print tree ==> tough but try
   d. Amazon question ==> link in the tree that has sum of nodes = 30


readabel_rev.c: ==> done
  flips to readable reverse

string_repetition.cpp ==> done
Part 1: removes all duplicates from the vector string
   implementation:
     1. push each word into a map
     2. print each element out of map
Part 2: count number of occurance of each word and return their map

binary_tree.c:
create a binary tree<min on left; max on right>.. tree height will not be adjusted
find sum of all elements ==> done
find min ==> done
find max ==> done

         90
        /  \ 
      10   40
     / \   / \
   20  30 50  60
    
  pre order:  90 10 20 30 40 50 60
  in-order:   20 10 30 90 50 40 60
  post order: 20 30 10 40 50 60 90
  level order:
      90
      10 40
      20 30 50 60
      
      
Binary search tree example:

       50
     /    \
    30    80
   / \   /  \
  15 40 60  90

  pre order:  50 30 15 40 80 60 90
  in-order:   15 30 40 50 60 80 90 
  post order: 15 40 30 80 60 90 50
  level order:
    50
    30 80
    15 40 60 90

